Python



apt install python[3]  --установка python

apt install pip        --установка пакетного менеджера pip

pip list               --список установленных пакетов




print(f"Какой-то текст {переменная} текст {переменная}")          --ф-строки, вставка переменной
n = input("введите число")                                        --запрос на ввод данных с одновременным вводом

"ada lovelace".title()  ->  "Ada Lovelace"                        --капитализация текста (заглавные)
"Ada Lovelace".upper()  ->  "ADA LOVELACE"                        --верхний регистр
"Ada Lovelace".lower()  ->  "ada lovelace"                        --нижний регистр
"   Ada Lovelace".lstrip   ->  "Ada Lovelace"                     --удаляет прбелы слева
"Ada Lovelace   ".rstrip() ->  "Ada Lovelace"                     --удаляет пробелы справа
" Ada Lovelace ".strip()   ->  "AdaLovelace"                      --удаляет пробелы везде

"abc123".isalnum()  ->  True    --состоит ли строка из букв и цифр
"ABCabc".isalpha()  ->  True    --состоит ли строка только из букв
"1234567".isdigit() ->  True    --состоит ли строка только из цифр
"abc".islower()     ->  True    --только из букв нижнего регистра
"ФИО".isupper()     ->  True    --только из букв верхнего регистра
"     ".isspace()   ->  True    --только из пробельных символов
ord('A')            ->  65      --код символ в ASCII
chr(65)             ->  'A'     --символ по коду


\t       --табуляция
\n       --перевод на новую строку



x, y, z = 1, 2, 3           --множественное присваивание
1_400_000                   --игнорирования символов подчеркивания


['one', 'two', 'three'].append('four')  -> ['one', 'two', 'three', 'four']      --присоединение элемента в конец списка
['one', 'two', 'three'].insert(1, 'five')  -> ['one', 'five', 'two', 'three']   --вставка элемента по индексу
n = ['one', 'two', 'three']
del n[0]  -> ['two', 'three']                       --удаление элемента по индексу
переменная = n.pop()                                --удаляет последний элемент и помещает его в переменную
переменная = n.pop(1)                               --удаление элемента с позиции 1 и помещение в переменную
n.remove('two') ->  ['one', 'three']                --удаление элемента по значению

n.sort()            --сортировка по возрастанию, меняет список (метод "быстрая сортировка")
sorted(n)           --возращает копию отсортированного списка без изменения оригинала

n.reverse()         --переставляет элементы в обратном порядке
len(n)              --вычесляет длинну списка 
list('word')  ->  ['w', 'o', 'r', 'd']    --создать список
2 in [2, 3, 4]     -> True
max([2, 3, 4])     -> 4
min([2, 3, 4])     -> 2
sum([2, 3, 4])     -> 9
 

for i in list:                  --печать всех элементов массива list
  print(i)

for i, v in enumerate(list):    --печать всех элементов и индексов массива
  print(i, v)
  
#эквивалент вложенному списку
for a in list_a:
  for b in list_b:
    for c in list_c:
      if a + b + c == 1000:
      
      

      
from itertools import product
for a, b, c in product(list_a, list_b, list_c):
  if a + b + c == 1000:

range(5) -> 1 2 3 4                --генерирует список натуральных чисел


[x ** 2 for x in range(1, 10)]     --генератор

Строки

"foO BaR BAZ quX".capitalize()  ->  Foo bar baz qux

"FOO Bar 123 baz qUX".swapcase() -> foo bAR 123 BAZ Qux

"the sun also rises".title()     -> The Sun Also Rises

"FOO Bar 123 baz qUX".lower() -> foo bar 123 baz qux

"FOO Bar 123 baz qUX".upper()  -> FOO BAR 123 BAZ QUX


'foo goo moo'.count('oo')         ->  3
'foo goo moo'.count('oo', 0, 8)   ->  2    (подсчет с 0 по 8 символы)

"foobar".startswith('foo')        ->  True
"oobar".startswith('baz')         ->  False

"foobar".endswith('bar')          ->  True
"foobar".endswith('baz')          ->  False

"foo bar foo baz foo qux".find('foo'))        ->   0   (индекс найденной подстроки)
"foo bar foo baz foo qux".find('bar'))        ->   4
"foo bar foo baz foo qux".rfind('o'))         ->   18  (поиск начинается справа)
"foo bar foo baz foo qux".find('python'))     ->   -1

index(<sub>, <start>, <end>) идентичен методу find


Срезы

Положительные индексы	   0   1	 2	 3	 4	 5	 6	 7	 8	 9
Строка	                 a   b	 c   d   e   f   g   h   i 	 j
Отрицательные индексы  -10	-9	-8	-7	-6	-5	-4	-3	-2	-1

x[2:4]   ->      cd
x[:4]    ->    abcd
x[6:]    ->          ghij
x[-3:0]  ->           hij
x[-9:-4] ->     bcdef
x[0:9:2] ->    acegi
x[::-1]  ->    jihgfedcba

<ответ_1> if <условие> else <ответ_2>          --тренарный оператор


Декораторы



